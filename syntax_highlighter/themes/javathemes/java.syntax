"(\b(private)\b|\b(public)\b|\b(class)\b|\b(for)\(|\b(if)(?=(\s|\())|\b(do)\b|\b(import)\b|\b(package)\b)": keyword
"(?<=(\}|\s))(else)(?=(\s|\{))": else
"(?<=(\}|\s))(else)(?=(\s|\())": elseif
"\b(while)(?=(\(|\s))": while
"(\b(true)\b|\b(false)\b|\b(NULL)\b|\b(void)\b|\b(int)\b|\b(String)\b|\b(double)\b|\b(boolean)\b|\b(char)\b)": special
"(?<=\.)(.*)(?=\()" : funccall
"((?<=")(.*)(?="))": string
"(\s)([1-9]*)(?=(\s|\:))": number
"(//.*)(?=\n)": comment
"((/\*\*)|(/\*))(.*?)(\*/)": mlcomment
"\b(try)(?={)": try
"(?<=})(catch)": except
"((?<=catch..0m\()|(?<=catch..0m\s\())(.*)(?=\))": excepterror
"(?<=int..0m)(.*)(?=\()": funcnameint
"(?<=double..0m)(.*)(?=\()": funcnamedouble
"(?<=String..0m)(.*)(?=\()": funcnameString
"(?<=char..0m)(.*)(?=\()": funcnamechar
"(?<=void..0m)(.*)(?=\()": funcnamevoid
"(?<=boolean..0m)(.*)(?=\()": funcnameboolean
"(?<=public..0m)(.*)(?=\()": funcnamepublic
"(?<=private..0m)(.*)(?=\()": funcnameprivate
"(?<=int..0m)(.*)(?=\=)": varassint
"(?<=double..0m)(.*)(?=\=)": varassdouble
"(?<=String..0m)(.*)(?=\=)": varassString
"(?<=char..0m)(.*)(?=\=)": varasschar
"(?<=boolean..0m)(.*)(?=\=)": varassboolean
"((?<=class..0m)|(?<=class\s))(.*)(?={)": classname
"\b(return)(?=(\b|;))": return
"(\s(\+)\s|\s(-)\s|\s(>\=)\s|\s(\+=)\s|\s(<=)\s|\s(-=)\s)": operator
